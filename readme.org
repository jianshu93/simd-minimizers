* simd-minimizers

A SIMD-accelerated library to compute random minimizers.

It can compute all the minimizers of a human genome in 4 seconds using a single thread.
It also provides a /canonical/ version that ensures that a sequence and its reverse-complement always select the same positions, which takes 6 seconds on a human genome.

The underlying algorithm is described in [[https://doi.org/10.1101/2025.01.27.634998][SimdMinimizers: Computing random minimizers, fast]].

** Requirements

If you have not installed Rust yet, please visit [[https://rustup.rs/][rustup.rs]] to install it.

This library supports AVX2 and NEON instruction sets.
Make sure to set ~RUSTFLAGS="-C target-cpu=native"~ when compiling to use the instruction sets available on your architecture.
#+begin_src sh
RUSTFLAGS="-C target-cpu=native" cargo run --release
#+end_src

** Usage example
#+begin_src rust
// Packed SIMD version.
use packed_seq::{complement_char, PackedSeqVec, SeqVec};
let seq = b"ACGTGCTCAGAGACTCAG";
let k = 5;
let w = 7;

let packed_seq = PackedSeqVec::from_ascii(seq);
let mut minimizer_positions = Vec::new();
simd_minimizers::canonical_minimizer_positions(packed_seq.as_slice(), k, w, &mut minimizer_positions);
assert_eq!(minimizer_positions, vec![3, 5, 12]);
#+end_src

** Benchmarks

=simd-minimizers-bench/benches/bench.rs= contains benchmarks used in [[https://curiouscoding.nl/posts/fast-minimizers/][this blogpost]].

=simd-minimizers-bench/src/bin/paper.rs= contains benchmarks used in the paper.

Note that the benchmarks require some nightly features, you can install the latest nightly version with
#+begin_src sh
rustup install nightly
#+end_src

To replicate results from the paper, go into =simd-minimizers-bench= and run
#+begin_src sh
RUSTFLAGS="-C target-cpu=native" cargo +nightly run --release
python eval.py
#+end_src
